import telebot
import requests
import json
from googletrans import Translator
import time

bot = telebot.TeleBot("")
api_token = ""
url = 'https://api.vyro.ai/v1/imagine/api/generations'
feedback_file = 'feedback.json'
language_file = 'language.json'

user_language = {}
user_feedback = {}

def load_language():
    try:
        with open(language_file, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_language():
    with open(language_file, 'w', encoding='utf-8') as file:
        json.dump(user_language, file, ensure_ascii=False, indent=4)

def get_translation(lang, key):
    translations = {
        'uk': {
            'welcome': "–ü—Ä–∏–≤—ñ—Ç, {name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
            'choose_language': "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose your language",
            'services_info': """
            üåü –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ üåü

            1. üì∏ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó:
               - –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Ç–∞ —Å—ñ–º–µ–π–Ω—ñ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó.
               - –í–µ—Å—ñ–ª—å–Ω—ñ —Ç–∞ —É—Ä–æ—á–∏—Å—Ç—ñ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó.
               - –î–∏—Ç—è—á—ñ —Ç–∞ –Ω–æ–≤–æ–Ω–∞—Ä–æ–¥–∂–µ–Ω—ñ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó.

            2. üåê –¶–∏—Ñ—Ä–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:
               - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂.
               - –î–∏–∑–∞–π–Ω –±–∞–Ω–µ—Ä—ñ–≤ —Ç–∞ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.

            3. üñºÔ∏è –û–±—Ä–æ–±–∫–∞ —Ç–∞ —Ä–µ—Ç—É—à—É–≤–∞–Ω–Ω—è:
               - –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ —Ä–µ—Ç—É—à—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.
               - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–∞ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è.

            4. üé® –ì—Ä–∞—Ñ—ñ—á–Ω–∏–π –¥–∏–∑–∞–π–Ω:
               - –†–æ–∑—Ä–æ–±–∫–∞ –ª–æ–≥–æ—Ç–∏–ø—ñ–≤ —Ç–∞ –±—Ä–µ–Ω–¥–æ–≤–æ—ó –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∏.
               - –î–∏–∑–∞–π–Ω –ø–æ–ª—ñ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ (–≤—ñ–∑–∏—Ç–∫–∏, –ª–∏—Å—Ç—ñ–≤–∫–∏, –ø–ª–∞–∫–∞—Ç–∏).

            5. üì∑ –û—Ä–µ–Ω–¥–∞ —Ñ–æ—Ç–æ—Å—Ç—É–¥—ñ—ó:
               - –û—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥—ñ–π–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ—Å—Ç–æ—Ä—É –¥–ª—è –∑–π–æ–º–æ–∫.
               - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–≤.
            """,
            'website': "–í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç –∑–∞ –∞–¥—Ä–µ—Å–æ—é: https://linktr.ee/indigophoto",
            'apply_session': "–î–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—à—É —Ñ–æ—Ä–º—É –∑–∞ –¥–∞–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: https://docs.google.com/forms/d/e/1FAIpQLSenSpsNeJVz8Nmlio-27T2vzZe2JO5DrBnxzLSb-_FPdeqpPA/viewform?usp=sf_link",
            'generate_image_prompt': "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—Å —Ç–æ–≥–æ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏.",
            'feedback_prompt': "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è.",
            'feedback_email_prompt': "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.",
            'feedback_text_prompt': "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ —ñ–¥–µ—ó, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∞–±–æ –≤—ñ–¥–≥—É–∫–∏.",
            'thank_you_feedback': "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!",
            'image_gen_error': "–ù–∞ –∂–∞–ª—å, —è –ø–æ–∫–∏ —â–æ –Ω–µ –≤–º—ñ—é —Ü—å–æ–≥–æ —Ä–æ–±–∏—Ç–∏ üòî",
            'back_to_menu': "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é",
            'change_language': "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"
        },
        'en': {
            'welcome': "Hello, {name}! Choose an option from the menu:",
            'choose_language': "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose your language",
            'services_info': """
            üåü Information about our services üåü

            1. üì∏ Professional Photoshoots:
               - Individual and family photoshoots.
               - Wedding and ceremonial photoshoots.
               - Children and newborn photoshoots.

            2. üåê Digital Content:
               - Creation and editing of images for social media.
               - Design of banners and advertising materials.

            3. üñºÔ∏è Editing and Retouching:
               - Professional photo retouching.
               - Color and lighting correction.

            4. üé® Graphic Design:
               - Logo and brand identity development.
               - Design of printed materials (business cards, flyers, posters).

            5. üì∑ Studio Rental:
               - Rental of studio equipment and shooting space.
               - Consultations and assistance from professional photographers.
            """,
            'website': "Visit our website at: https://linktr.ee/indigophoto",
            'apply_session': "To apply for a photo session, please fill out our form at: https://docs.google.com/forms/d/e/1FAIpQLSfoPcQKYRZHHCuxLDIbZwIWefg8yKezfKap97EGYAIA-NYO6A/viewform?usp=sf_link",
            'generate_image_prompt': "Please enter the description of what you want to generate.",
            'feedback_prompt': "Please enter your full name.",
            'feedback_email_prompt': "Please enter your email address.",
            'feedback_text_prompt': "Please enter your ideas, suggestions, or feedback.",
            'thank_you_feedback': "Thank you for your feedback!",
            'image_gen_error': "Unfortunately, I can't do that yet üòî",
            'back_to_menu': "Back to Menu",
            'change_language': "Change language"
        }
    }
    return translations[lang][key]

def get_main_menu_markup(lang):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 'uk':
        markup.row('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏', '–ù–∞—à –≤–µ–±-—Å–∞–π—Ç')
        markup.row('–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é', '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')
        markup.row('–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫', '–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É')
    elif lang == 'en':
        markup.row('Information about services', 'Our website')
        markup.row('Apply for a photoshoot', 'Generate an image')
        markup.row('Feedback', 'Change language')
    return markup

def get_back_to_menu_markup(lang):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 'uk':
        markup.row("–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
    elif lang == 'en':
        markup.row("Back to Menu")
    return markup

main_menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.row('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏', '–ù–∞—à –≤–µ–±-—Å–∞–π—Ç')
main_menu_markup.row('–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é', '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')
main_menu_markup.row('–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫', '–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É')

language_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
language_markup.row('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'English')

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, get_translation('uk', 'choose_language'), reply_markup=language_markup)
    bot.register_next_step_handler(message, set_language)

def set_language(message):
    user_id = message.from_user.id
    if message.text:
        if message.text.lower() == '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞':
            user_language[user_id] = 'uk'
            save_language()
            bot.send_message(message.chat.id, "–í–∏–±—Ä–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.", reply_markup=get_main_menu_markup('uk'))
        elif message.text.lower() == 'english':
            user_language[user_id] = 'en'
            save_language()
            bot.send_message(message.chat.id, "English language selected.", reply_markup=get_main_menu_markup('en'))
        else:
            bot.send_message(message.chat.id, get_translation('uk', 'choose_language'), reply_markup=language_markup)
            return
    else:
        bot.send_message(message.chat.id, get_translation('uk', 'choose_language'), reply_markup=language_markup)
        return

@bot.message_handler(func=lambda message: message.text.lower() in ['—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏', 'information about services'])
def services_info(message):
    lang = user_language.get(message.from_user.id, 'uk')
    bot.send_message(message.chat.id, get_translation(lang, 'services_info'))

@bot.message_handler(func=lambda message: message.text.lower() in ['–Ω–∞—à –≤–µ–±-—Å–∞–π—Ç', 'our website'])
def our_website(message):
    lang = user_language.get(message.from_user.id, 'uk')
    bot.send_message(message.chat.id, get_translation(lang, 'website'))

@bot.message_handler(func=lambda message: message.text.lower() in ['–ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é', 'apply for a photoshoot'])
def apply_photo_session(message):
    lang = user_language.get(message.from_user.id, 'uk')
    bot.send_message(message.chat.id, get_translation(lang, 'apply_session'))

@bot.message_handler(func=lambda message: message.text.lower() in ['–∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', 'generate an image'])
def handle_generate_image_request(message):
    lang = user_language.get(message.from_user.id, 'uk')
    prompt_text = get_translation(lang, 'generate_image_prompt')
    bot.send_message(message.chat.id, prompt_text, reply_markup=get_back_to_menu_markup(lang))
    bot.register_next_step_handler(message, handle_generate_image)

@bot.message_handler(func=lambda message: message.text.lower() in ['–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫', 'feedback'])
def feedback(message):
    lang = user_language.get(message.from_user.id, 'uk')
    bot.send_message(message.chat.id, get_translation(lang, 'feedback_prompt'), reply_markup=get_back_to_menu_markup(lang))
    bot.register_next_step_handler(message, get_full_name)

@bot.message_handler(func=lambda message: message.text.lower() in ['–∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É', 'change language'])
def change_language(message):
    bot.send_message(message.chat.id, get_translation('uk', 'choose_language'), reply_markup=language_markup)
    bot.register_next_step_handler(message, set_language)

def get_full_name(message):
    user_id = message.from_user.id

    if message.text is None:
        lang = user_language.get(user_id, 'uk')
        if lang == 'en':
            response = "I don't understand your question."
        else:
            response = "–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."
        bot.send_message(message.chat.id, response)
        return

    if message.text.lower() == '–Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é' or message.text.lower() == 'back to menu':
        back_to_menu_simple(message)
    else:
        user_id = message.from_user.id
        user_feedback[user_id] = {'full_name': message.text}
        lang = user_language.get(user_id, 'uk')
        bot.send_message(message.chat.id, get_translation(lang, 'feedback_email_prompt'),
                         reply_markup=get_back_to_menu_markup(lang))
        bot.register_next_step_handler(message, get_email)

def get_email(message):
    user_id = message.from_user.id

    if message.text is None:
        lang = user_language.get(user_id, 'uk')
        if lang == 'en':
            response = "I don't understand your question."
        else:
            response = "–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."
        bot.send_message(message.chat.id, response)
        return

    if message.text.lower() == '–Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é' or message.text.lower() == 'back to menu':
        back_to_menu_simple(message)
    else:
        user_id = message.from_user.id
        user_feedback[user_id]['email'] = message.text
        lang = user_language.get(user_id, 'uk')
        bot.send_message(message.chat.id, get_translation(lang, 'feedback_text_prompt'),
                         reply_markup=get_back_to_menu_markup(lang))
        bot.register_next_step_handler(message, get_feedback)

def get_feedback(message):
    user_id = message.from_user.id

    if message.text is None:
        lang = user_language.get(user_id, 'uk')
        if lang == 'en':
            response = "I don't understand your question."
        else:
            response = "–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."
        bot.send_message(message.chat.id, response)
        return

    if message.text.lower() == '–Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é' or message.text.lower() == 'back to menu':
        back_to_menu_simple(message)
    else:
        if user_id not in user_feedback:
            user_feedback[user_id] = {}
        user_feedback[user_id]['feedback_text'] = message.text
        save_feedback(user_feedback[user_id])
        lang = user_language.get(user_id, 'uk')
        bot.send_message(message.chat.id, get_translation(lang, 'thank_you_feedback'),
                         reply_markup=get_main_menu_markup(lang))

def handle_generate_image(message):
    user_id = message.from_user.id

    if message.text is None:
        if user_id in user_language and user_language[user_id] == 'en':
            bot.send_message(message.chat.id, "I don't understand your question.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
        return

    if message.text.lower() == '–Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é' or message.text.lower() == 'back to menu':
        back_to_menu_simple(message)
    else:
        prompt_text = message.text
        translated_text = translate_text(prompt_text)
        print(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É: {translated_text}")
        response = generate_image(translated_text)
        if response.status_code == 200:
            with open('image.jpg', 'wb') as f:
                f.write(response.content)
            bot.send_photo(message.chat.id, open('image.jpg', 'rb'))
            print('–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.')
        else:
            if user_id in user_language and user_language[user_id] == 'en':
                bot.send_message(message.chat.id, "I don't understand your question.")
            else:
                bot.send_message(message.chat.id, get_translation(user_language[user_id], 'image_gen_error'))
            print('–ü–æ–º–∏–ª–∫–∞:', response.status_code)

def translate_text(text):
    translator = Translator()
    translated_text = translator.translate(text, src='auto', dest='en').text
    return translated_text


def generate_image(prompt_text):
    headers = {
        'Authorization': 'Bearer ' + api_token
    }

    payload = {
        'prompt': (None, prompt_text),
        'style_id': (None, '29')
    }

    response = requests.post(url, headers=headers, files=payload)
    return response

def save_feedback(feedback_data):
    with open(feedback_file, 'a', encoding='utf-8') as file:
        json.dump(feedback_data, file, ensure_ascii=False)
        file.write('\n')

def back_to_menu_simple(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, 'uk')
    bot.send_message(message.chat.id, get_translation(lang, 'back_to_menu'),
                     reply_markup=get_main_menu_markup(lang))

@bot.message_handler(content_types=['photo', 'video', 'audio', 'voice', 'document', 'sticker', 'location', 'contact', 'animation'])
def handle_media(message):
    lang = user_language.get(message.from_user.id, 'uk')
    if lang == 'en':
        bot.send_message(message.chat.id, "I don't understand your question. Please choose an option from the menu:",
                         reply_markup=get_main_menu_markup(lang))
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
                         reply_markup=get_main_menu_markup(lang))
    time.sleep(3)
    bot.delete_message(message.chat.id, message.message_id)



@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, 'uk')

    if message.text == get_translation(lang, 'generate_image_prompt'):
        handle_generate_image(message)
        return

    if message.text.lower() in ['–Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 'back to menu']:
        back_to_menu_simple(message)
        return

    if lang == 'en':
        bot.send_message(message.chat.id, "I don't understand your question. Please choose an option from the menu:",
                         reply_markup=get_main_menu_markup(lang))
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
                         reply_markup=get_main_menu_markup(lang))
    time.sleep(3)
    bot.delete_message(message.chat.id, message.message_id)

bot.polling()
